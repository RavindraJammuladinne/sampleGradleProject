buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.+'
		classpath 'org.akhikhl.gretty:gretty:+'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.4'
        classpath 'commons-codec:commons-codec:1.10' // to get base64
        //classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0'
		//classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
		//classpath 'gradle.plugin.com.webcohesion.enunciate:enunciate-gradle:2.1.1'
		classpath	'eu.appsatori:gradle-fatjar-plugin:0.3'
    }
    configurations.classpath {
        resolutionStrategy {
            cacheDynamicVersionsFor 0, 'seconds'
            cacheChangingModulesFor 0, 'seconds'
        }
    }
}

def javaProjects() {
    subprojects.findAll { new File(it.projectDir, 'src').directory }
}

allprojects {
	apply plugin: 'java'
    	apply plugin: 'com.jfrog.artifactory'
	apply plugin: 'maven-publish'
	
	sourceSets {  
		main {  
			java {  
				srcDir 'src'  
			}  
		}  
	} 
	
    group = "com.example"
    version = currentVersion
    status = 'Integration'
}

repositories {
    mavenCentral()
    //maven { url 'http://sample'  }
}

configurations {
}

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    options.encoding = 'UTF-8'
    options.debug = true

    // Output all debug.
    options.debug(debugLevel: 'source,vars,lines')
}

dependencies {
    //compile 'org.hibernate:hibernate-core:3.6.7.Final'
}


configure(javaProjects()) {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
	//apply plugin: 'war'

    /*
	dependencies {
        testCompile 'junit:junit:4.7'
    }*/
}

//artifactoryPublish.skip = true

artifactory {
	clientConfig.setIncludeEnvVars(true)
    clientConfig.info.addEnvironmentProperty('test.adding.dynVar',new java.util.Date().toString())

    publish {
        contextUrl = "${artifactory_url}"
        repository {
            repoKey = 'sample' 				// The Artifactory repository key to publish to
            username = "${artifactory_user}" 		// The publisher user name
            password = "${artifactory_password}" 	// The publisher password
            // This is an optional section for configuring Ivy publication (when publishIvy = true).
            /*
			ivy {
              ivyLayout = '[organization]/[module]/ivy-[revision].xml'
              artifactLayout = '[organization]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]'
              mavenCompatible = true //Convert any dots in an [organization] layout value to path separators, similar to Maven's groupId-to-path conversion. True if not specified
            }*/
        }
        defaults {
            // Reference to Gradle publications defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be published to Artifactory.
            publications('mavenJava')
            publishArtifacts = true
            // Properties to be attached to the published artifacts.
            //properties = ['qa.level': 'basic', 'dev.team' : 'core']
            publishPom = true // Publish generated POM files to Artifactory (true by default)
            //publishIvy = true // Publish generated Ivy descriptor files to Artifactory (true by default)
        }
    }
    resolve {
        repository {
			contextUrl = "${artifactory_url}"
			repoKey = 'all' //this is the key of the repo which u need to resolve all u r depedencies
			username = "${artifactory_user}"  
            		password = "${artifactory_password}"
           		maven = true

        }
    }
}
